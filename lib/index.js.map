{"version":3,"sources":["../src/index.es6"],"names":["options","manifest","files","filesPath","outputDir","__dirname","outputDest","resolve","file","hash","removeOriginals","writeManifest","ensureFileSync","writeFileSync","JSON","stringify","join","filesPathParts","split","forEach","filePathPart","concat","sync","baseDir","length","slice","parsedPath","parse","filename","base","dirParts","dir","fileDir","pop","buffer","readFileSync","revdPath","unlinkSync","console","warn"],"mappings":"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","file":"index.js","sourcesContent":["import revHash from'rev-hash'\nimport revPath from'rev-path'\nimport path from'path'\nimport fs from'fs-extra'\nimport glob from'glob'\nimport commondir from'commondir'\nimport assert from'assert'\n\nexport default function(options) {\n\n  const manifest = {}\n  //use assert to require filesPath, outputDir\n  assert(options.files, 'files property is required')\n  const filesPath = options.files\n  const outputDir = options.outputDir || __dirname\n  const outputDest = path.resolve(outputDir)\n  const file = options.file\n  const hash = options.hash || false\n  const removeOriginals = options.removeOriginals || false\n\n  function writeManifest(manifest) {\n    if (file) {\n      fs.ensureFileSync(path.resolve(file))\n      fs.writeFileSync(path.resolve(file), JSON.stringify(manifest), 'utf8')\n    } else {\n      fs.writeFileSync(path.join(__dirname, 'assets.json'), JSON.stringify(manifest), 'utf8');\n    }\n  }\n\n  const filesPathParts = filesPath.split(',')\n  let files = []\n  filesPathParts.forEach(function(filePathPart) {\n    files = files.concat(files, glob.sync(path.resolve(filePathPart), {}))\n  })\n\n  let baseDir\n  if (files && files.length === 1) {\n    baseDir = files[0].split('/').slice(0,-1).join('/')\n  } else {\n    baseDir = commondir(files)\n  }\n  if (files && files.length) {\n    files.forEach(function(file) {\n      const parsedPath = path.parse(file)\n      const filename = parsedPath.base\n      const dirParts = parsedPath.dir.split('/')\n      let fileDir = ''\n      if (baseDir !== parsedPath.dir) {\n        fileDir = dirParts.pop()\n      }\n      const buffer = fs.readFileSync(file)\n      if (hash) {\n        const hash = revHash(buffer)\n        const revdPath = revPath(path.join(fileDir, filename), hash)\n        manifest[path.join(fileDir, filename)] = revdPath\n        fs.ensureFileSync(path.join(outputDest, revdPath))\n        fs.writeFileSync(path.join(outputDest, revdPath), buffer)\n      } else {\n        manifest[path.join(fileDir, filename)] = path.join(fileDir, filename)\n        fs.ensureFileSync(path.join(outputDest, path.join(fileDir, filename)))\n        fs.writeFileSync(path.join(outputDest, path.join(fileDir, filename)), buffer)\n      }\n\n      if (removeOriginals) {\n        fs.unlinkSync(file);\n      }\n    })\n\n    writeManifest(manifest)\n\n  } else {\n    console.warn(`No files found matching ${path.resolve(filesPath)}`)\n    writeManifest({})\n  }\n}\n"]}